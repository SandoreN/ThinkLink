{"ast":null,"code":"import _regeneratorRuntime from \"/home/user/School/CSC330/ThinkLink/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/user/School/CSC330/ThinkLink/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport savebuttoncontainer from '../components/savebuttoncontainer';\nimport { ref, computed, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport jsPDF from 'jspdf';\nimport html2pdf from 'html2pdf.js';\nimport axios from 'axios';\nexport default {\n  name: 'Drafts',\n  components: {\n    savebuttoncontainer: savebuttoncontainer\n  },\n  props: {\n    project_id: {\n      type: String,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var draftName = ref('');\n    var markdown = ref('');\n    var md = new MarkdownIt();\n    var project_id = ref(props.project_id);\n    watch(props, function (newProps) {\n      project_id.value = newProps.project_id;\n    });\n    var compiledMarkdown = computed(function () {\n      return md.render(markdown.value);\n    });\n    /*\n    const save = async () => {\n        const doc = new jsPDF();\n        doc.text(markdown.value, 10, 10);\n        const pdf = doc.output('blob');\n         try {\n            const formData = new FormData();\n            formData.append('action', 'create_draft');\n            formData.append('file', pdf, `${draftName.value}.pdf`);\n            formData.append('file_data', JSON.stringify({\n                content: markdown.value,\n                filename: `${draftName.value}.pdf`\n            }));\n            console.log('formData:', formData);\n             const response = await axios.post(`${process.env.VUE_APP_FLASK_APP_URL}/project_workspace/${props.project_id}`, formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            });\n             if (response.status === 200) {\n                console.log('Draft saved successfully');\n            } else {\n                console.log('Failed to save draft');\n            }\n        } catch (error) {\n            console.error('An error occurred while saving the draft:', error);\n        }\n    };\n    */\n    var save = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var htmlContent, element, opt, worker, pdf, formData, response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              htmlContent = md.render(markdown.value); // Convert markdown to HTML\n              element = document.createElement('div'); // Create a new div element\n              element.innerHTML = htmlContent; // Set the innerHTML of the div to the HTML content\n              _context.prev = 3;\n              opt = {\n                margin: 1,\n                filename: \"\".concat(draftName.value, \".pdf\"),\n                image: {\n                  type: 'jpeg',\n                  quality: 0.98\n                },\n                html2canvas: {\n                  scale: 2\n                },\n                jsPDF: {\n                  unit: 'in',\n                  format: 'letter',\n                  orientation: 'portrait'\n                }\n              }; // Create a PDF from the div element and get it as a blob\n              worker = html2pdf().set(opt).from(element);\n              _context.next = 8;\n              return worker.outputPdf('blob');\n            case 8:\n              pdf = _context.sent;\n              formData = new FormData();\n              formData.append('action', 'create_draft');\n              formData.append('file', pdf, \"\".concat(draftName.value, \".pdf\"));\n              formData.append('file_data', JSON.stringify({\n                content: markdown.value,\n                filename: \"\".concat(draftName.value, \".pdf\")\n              }));\n              console.log('formData:', formData);\n              _context.next = 16;\n              return axios.post(\"\".concat(process.env.VUE_APP_FLASK_APP_URL, \"/project_workspace/\").concat(props.project_id), formData, {\n                headers: {\n                  'Content-Type': 'multipart/form-data'\n                }\n              });\n            case 16:\n              response = _context.sent;\n              if (response.status === 200) {\n                console.log('Draft saved successfully');\n              } else {\n                console.log('Failed to save draft');\n              }\n              _context.next = 23;\n              break;\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](3);\n              console.error('An error occurred while saving the draft:', _context.t0);\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[3, 20]]);\n      }));\n      return function save() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      draftName: draftName,\n      markdown: markdown,\n      compiledMarkdown: compiledMarkdown,\n      save: save\n    };\n  }\n};","map":{"version":3,"names":["savebuttoncontainer","ref","computed","watch","MarkdownIt","jsPDF","html2pdf","axios","name","components","props","project_id","type","String","required","setup","draftName","markdown","md","newProps","value","compiledMarkdown","render","save","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","htmlContent","element","opt","worker","pdf","formData","response","wrap","_callee$","_context","prev","next","document","createElement","innerHTML","margin","filename","concat","image","quality","html2canvas","scale","unit","format","orientation","set","from","outputPdf","sent","FormData","append","JSON","stringify","content","console","log","post","process","env","VUE_APP_FLASK_APP_URL","headers","status","t0","error","stop","apply","arguments"],"sources":["/home/user/School/CSC330/ThinkLink/client/src/components/drafts.vue"],"sourcesContent":["<template>\n    <input class=\"draft-name-input\" v-model=\"draftName\" placeholder=\"Enter draft name\" />\n    <div v-html=\"compiledMarkdown\" class=\"markdown-preview\"></div>\n    <textarea id=\"markdown-editor\" v-model=\"markdown\"></textarea>\n    <savebuttoncontainer class=\"save-button\" @click=\"save\"></savebuttoncontainer>\n</template>\n  \n<script>\nimport savebuttoncontainer from '../components/savebuttoncontainer'\nimport { ref, computed, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport jsPDF from 'jspdf';\nimport html2pdf from 'html2pdf.js';\nimport axios from 'axios';\n\nexport default {\n    name: 'Drafts',\n    components: {\n        savebuttoncontainer\n    },\n    props: {\n        project_id: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props) {\n        const draftName = ref('');\n        const markdown = ref('');\n        const md = new MarkdownIt();\n        const project_id = ref(props.project_id);\n\n        watch(props, (newProps) => {\n            project_id.value = newProps.project_id;\n        });\n\n        const compiledMarkdown = computed(() => {\n            return md.render(markdown.value);\n        });\n        /*\n        const save = async () => {\n            const doc = new jsPDF();\n            doc.text(markdown.value, 10, 10);\n            const pdf = doc.output('blob');\n\n            try {\n                const formData = new FormData();\n                formData.append('action', 'create_draft');\n                formData.append('file', pdf, `${draftName.value}.pdf`);\n                formData.append('file_data', JSON.stringify({\n                    content: markdown.value,\n                    filename: `${draftName.value}.pdf`\n                }));\n                console.log('formData:', formData);\n\n                const response = await axios.post(`${process.env.VUE_APP_FLASK_APP_URL}/project_workspace/${props.project_id}`, formData, {\n                    headers: {\n                        'Content-Type': 'multipart/form-data'\n                    }\n                });\n\n                if (response.status === 200) {\n                    console.log('Draft saved successfully');\n                } else {\n                    console.log('Failed to save draft');\n                }\n            } catch (error) {\n                console.error('An error occurred while saving the draft:', error);\n            }\n        };\n        */\n        const save = async () => {\n            const htmlContent = md.render(markdown.value); // Convert markdown to HTML\n            const element = document.createElement('div'); // Create a new div element\n            element.innerHTML = htmlContent; // Set the innerHTML of the div to the HTML content\n\n            try {\n                const opt = {\n                    margin: 1,\n                    filename: `${draftName.value}.pdf`,\n                    image: { type: 'jpeg', quality: 0.98 },\n                    html2canvas: { scale: 2 },\n                    jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }\n                };\n\n                // Create a PDF from the div element and get it as a blob\n                const worker = html2pdf().set(opt).from(element);\n                const pdf = await worker.outputPdf('blob');\n\n                const formData = new FormData();\n                formData.append('action', 'create_draft');\n                formData.append('file', pdf, `${draftName.value}.pdf`);\n                formData.append('file_data', JSON.stringify({\n                    content: markdown.value,\n                    filename: `${draftName.value}.pdf`\n                }));\n                console.log('formData:', formData);\n\n                const response = await axios.post(`${process.env.VUE_APP_FLASK_APP_URL}/project_workspace/${props.project_id}`, formData, {\n                    headers: {\n                        'Content-Type': 'multipart/form-data'\n                    }\n                });\n\n                if (response.status === 200) {\n                    console.log('Draft saved successfully');\n                } else {\n                    console.log('Failed to save draft');\n                }\n            } catch (error) {\n                console.error('An error occurred while saving the draft:', error);\n            }\n        };\n        return {\n            draftName,\n            markdown,\n            compiledMarkdown,\n            save,\n    \n        };\n    },\n};\n</script>\n  \n<style scoped>\n.projectworkspace-pagemain {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-items: center;\n  justify-content: center;\n  padding-top: 30px;\n  max-width: 100%;\n  height: 100%;\n  position: relative;\n  flex-grow: 1;\n}\n\n#markdown-editor {\n  display: flex;\n  width: 500px;\n  height: 450px;\n  border: 1px solid black;\n}\n\n.draft-name-input {\n  height: 55px;\n  padding: 10px;\n  font-size: 30px;\n  margin-bottom: 20px;\n  border: 2px solid black;\n  border-radius: 4px;\n  align-items: center;\n  justify-content: center;\n}\n\n.markdown-preview {\n  margin-top: 10px;\n  margin-bottom: 10px;\n  overflow-y: auto;\n  height: 200px;\n  width: 500px;\n  border: 1px solid black;\n}\n\n.save-button {\n  align-self: center;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}