{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"projects-container\"\n  }, [_c(\"div\", {\n    staticClass: \"projects-container1\"\n  }, [_c(\"app-header\"), _c(\"div\", {\n    staticClass: \"projects-body\"\n  }, [_c(\"app-leftsidebar\"), _c(\"div\", {\n    staticClass: \"projects-pagemain\"\n  }, [_c(\"div\", _vm._l(_vm.projects, function (project) {\n    return _c(\"router-link\", {\n      key: project.id,\n      attrs: {\n        to: \"/project_workspace/\".concat(_vm.userId, \"/\").concat(project.id),\n        tag: \"button\"\n      }\n    }, [_vm._v(\" \" + _vm._s(project.name) + \"import Vue from 'vue'; import Vuex from 'vuex'; import api from '@/services/api'; Vue.use(Vuex); export default new Vuex.Store({ state: { user: null, token: localStorage.getItem('token') }, mutations: { setUser(state, user) { state.user = user; }, setToken(state, token) { state.token = token; } }, actions: { async login({ commit }, credentials) { try { const response = await api.post('/login', credentials); const token = response.data.token; localStorage.setItem('token', token); commit('setToken', token); const user = await api.get('/protected'); commit('setUser', user.data.user); } catch (error) { // Handle login error } }, async register(_, userData) { try { await api.post('/register', userData); // Handle successful registration } catch (error) { // Handle registration error } }, async logout({ commit }) { try { await api.post('/logout'); localStorage.removeItem('token'); commit('setToken', null); commit('setUser', null); } catch (error) { // Handle logout error } } }, getters: { isAuthenticated(state) { return !!state.token; }, currentUser(state) { return state.user; } } }); \")]);\n  }), 1)]), _c(\"app-rightsidebar\")], 1)], 1)]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\nexport { render, staticRenderFns };","map":{"version":3,"names":["render","_vm","_c","_self","staticClass","_l","projects","project","key","id","attrs","to","concat","userId","tag","_v","_s","name","staticRenderFns","_withStripped"],"sources":["/home/jescobar/Spring2024/SoftDD/ThinkLink/client/src/views/projects.vue"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", { staticClass: \"projects-container\" }, [\n    _c(\n      \"div\",\n      { staticClass: \"projects-container1\" },\n      [\n        _c(\"app-header\"),\n        _c(\n          \"div\",\n          { staticClass: \"projects-body\" },\n          [\n            _c(\"app-leftsidebar\"),\n            _c(\"div\", { staticClass: \"projects-pagemain\" }, [\n              _c(\n                \"div\",\n                _vm._l(_vm.projects, function (project) {\n                  return _c(\n                    \"router-link\",\n                    {\n                      key: project.id,\n                      attrs: {\n                        to: `/project_workspace/${_vm.userId}/${project.id}`,\n                        tag: \"button\",\n                      },\n                    },\n                    [\n                      _vm._v(\n                        \" \" +\n                          _vm._s(project.name) +\n                          \"import Vue from 'vue'; import Vuex from 'vuex'; import api from '@/services/api'; Vue.use(Vuex); export default new Vuex.Store({ state: { user: null, token: localStorage.getItem('token') }, mutations: { setUser(state, user) { state.user = user; }, setToken(state, token) { state.token = token; } }, actions: { async login({ commit }, credentials) { try { const response = await api.post('/login', credentials); const token = response.data.token; localStorage.setItem('token', token); commit('setToken', token); const user = await api.get('/protected'); commit('setUser', user.data.user); } catch (error) { // Handle login error } }, async register(_, userData) { try { await api.post('/register', userData); // Handle successful registration } catch (error) { // Handle registration error } }, async logout({ commit }) { try { await api.post('/logout'); localStorage.removeItem('token'); commit('setToken', null); commit('setUser', null); } catch (error) { // Handle logout error } } }, getters: { isAuthenticated(state) { return !!state.token; }, currentUser(state) { return state.user; } } }); \"\n                      ),\n                    ]\n                  )\n                }),\n                1\n              ),\n            ]),\n            _c(\"app-rightsidebar\"),\n          ],\n          1\n        ),\n      ],\n      1\n    ),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":";;AAAA,IAAIA,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC7B,IAAIC,GAAG,GAAG,IAAI;IACZC,EAAE,GAAGD,GAAG,CAACE,KAAK,CAACD,EAAE;EACnB,OAAOA,EAAE,CAAC,KAAK,EAAE;IAAEE,WAAW,EAAE;EAAqB,CAAC,EAAE,CACtDF,EAAE,CACA,KAAK,EACL;IAAEE,WAAW,EAAE;EAAsB,CAAC,EACtC,CACEF,EAAE,CAAC,YAAY,CAAC,EAChBA,EAAE,CACA,KAAK,EACL;IAAEE,WAAW,EAAE;EAAgB,CAAC,EAChC,CACEF,EAAE,CAAC,iBAAiB,CAAC,EACrBA,EAAE,CAAC,KAAK,EAAE;IAAEE,WAAW,EAAE;EAAoB,CAAC,EAAE,CAC9CF,EAAE,CACA,KAAK,EACLD,GAAG,CAACI,EAAE,CAACJ,GAAG,CAACK,QAAQ,EAAE,UAAUC,OAAO,EAAE;IACtC,OAAOL,EAAE,CACP,aAAa,EACb;MACEM,GAAG,EAAED,OAAO,CAACE,EAAE;MACfC,KAAK,EAAE;QACLC,EAAE,wBAAAC,MAAA,CAAwBX,GAAG,CAACY,MAAM,OAAAD,MAAA,CAAIL,OAAO,CAACE,EAAE,CAAE;QACpDK,GAAG,EAAE;MACP;IACF,CAAC,EACD,CACEb,GAAG,CAACc,EAAE,CACJ,GAAG,GACDd,GAAG,CAACe,EAAE,CAACT,OAAO,CAACU,IAAI,CAAC,GACpB,0kCACJ,CAAC,CAEL,CAAC;EACH,CAAC,CAAC,EACF,CACF,CAAC,CACF,CAAC,EACFf,EAAE,CAAC,kBAAkB,CAAC,CACvB,EACD,CACF,CAAC,CACF,EACD,CACF,CAAC,CACF,CAAC;AACJ,CAAC;AACD,IAAIgB,eAAe,GAAG,EAAE;AACxBlB,MAAM,CAACmB,aAAa,GAAG,IAAI;AAE3B,SAASnB,MAAM,EAAEkB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}