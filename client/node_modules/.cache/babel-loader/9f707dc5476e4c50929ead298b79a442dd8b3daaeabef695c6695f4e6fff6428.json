{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_quill_editor = _resolveComponent(\"quill-editor\");\n  var _component_savebuttoncontainer = _resolveComponent(\"savebuttoncontainer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"draft-name-input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $data.draftName = $event;\n    }),\n    placeholder: \"Enter draft name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.draftName]]), _createCommentVNode(\"<div v-html=\\\"compiledMarkdown \\\" class=\\\"markdown-preview\\\"></div>\"), _createVNode(_component_quill_editor, {\n    onReady: $options.onEditorReady,\n    ref: \"quill\",\n    id: \"quill-editor\",\n    editorContent: \"quill\"\n  }, null, 8 /* PROPS */, [\"onReady\"]), _createVNode(_component_savebuttoncontainer, {\n    class: \"save-button\",\n    onClick: $options.save\n  }, null, 8 /* PROPS */, [\"onClick\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","class","_cache","$event","$data","draftName","placeholder","_createCommentVNode","_createVNode","_component_quill_editor","onReady","$options","onEditorReady","ref","id","editorContent","_component_savebuttoncontainer","onClick","save"],"sources":["/home/user/School/CSC330/ThinkLink/client/src/components/drafts.vue"],"sourcesContent":["/<!--\n<template>\n    <input class=\"draft-name-input\" v-model=\"draftName\" placeholder=\"Enter draft name\" />\n    <div v-html=\"compiledMarkdown\" class=\"markdown-preview\"></div>\n    <textarea id=\"markdown-editor\" v-model=\"markdown\"></textarea>\n    <savebuttoncontainer class=\"save-button\" @click=\"save\"></savebuttoncontainer>\n</template>\n-->\n<template>\n    <input class=\"draft-name-input\" v-model=\"draftName\" placeholder=\"Enter draft name\" />\n    <!--<div v-html=\"compiledMarkdown \" class=\"markdown-preview\"></div>-->\n    <quill-editor @ready=\"onEditorReady\" ref=\"quill\" id=\"quill-editor\" editorContent=\"quill\" ></quill-editor>\n    <savebuttoncontainer class=\"save-button\" @click=\"save\"></savebuttoncontainer>\n</template>\n  \n<script>\nimport { ref } from 'vue';\nimport { quillEditor } from 'vue3-quill';\nimport savebuttoncontainer from '../components/savebuttoncontainer';\nimport { jsPDF } from 'jspdf';\nimport axios from 'axios';\nimport pdfMake from 'pdfmake/build/pdfmake';\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\npdfMake.vfs = pdfFonts.pdfMake.vfs;\n\nexport default {\n    name: 'Drafts',\n    components: {\n        savebuttoncontainer,\n        quillEditor\n    },\n    props: {\n        project_id: {\n        type: String,\n        required: true,\n        },\n    },\n    data() {\n        return {\n            draftName: '',\n            quill: null,\n            project_id: this.project_id,\n            editorContent: ''\n        };\n    },\n    methods: {\n        onEditorReady(editor) {\n            this.quill = editor;\n        },\n        async save() {\n            if (this.quill) {\n                const delta = this.quill.getContents();\n\n                const content = delta.ops.map(op => {\n                    if (op.insert) {\n                        if (typeof op.insert === 'string') {\n                            return { text: op.insert, ...op.attributes };\n                        } else if (op.insert.image) {\n                            return { image: op.insert.image };\n                        }\n                    }\n                    return {};\n                });\n\n                //const docDefinition = { content };\n                // Define the docDefinition for pdfMake\n                var docDefinition = {\n                    content: content,\n                    styles: {\n                        header: {\n                            fontSize: 36,\n                            bold: true,\n                            margin: [0, 0, 0, 10]\n                        }\n                    }\n                };\n\n                try {\n                    const pdfDocGenerator = pdfMake.createPdf(docDefinition);\n                    const pdfDataUrl = await new Promise((resolve, reject) => {\n                        pdfDocGenerator.getDataUrl((dataUrl) => {\n                            resolve(dataUrl);\n                        });\n                    });\n\n                    // Convert data URL to blob\n                    const blobResponse = await fetch(pdfDataUrl);\n                    const blob = await blobResponse.blob();\n\n                    const formData = new FormData();\n                    formData.append('action', 'create_draft');\n                    formData.append('file', blob, `${this.draftName}.pdf`);\n                    formData.append('file_data', JSON.stringify({\n                        content: this.quill.getText(),\n                        filename: `${this.draftName}.pdf`\n                    }));\n\n                    const postResponse = await axios.post(`${process.env.VUE_APP_FLASK_APP_URL}/project_workspace/${this.project_id}`, formData, {\n                        headers: {\n                            'Content-Type': 'multipart/form-data'\n                        }\n                    });\n\n                    if (postResponse.status === 200) {\n                        console.log('Draft saved successfully');\n                    } else {\n                        console.log('Failed to save draft');\n                    }\n                } catch (error) {\n                    console.error('An error occurred while saving the draft:', error);\n                }\n            }\n        }\n    }\n};\n</script>\n\n<style scoped>\n.projectworkspace-pagemain {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-items: center;\n  justify-content: center;\n  padding-top: 30px;\n  max-width: 100%;\n  height: 100%;\n  position: relative;\n  flex-grow: 1;\n}\n\n#quill-editor {\n  display: flex;\n  width: 500px;\n  height: 450px;\n  border: 1px solid black;\n}\n\n.draft-name-input {\n  height: 55px;\n  padding: 10px;\n  font-size: 30px;\n  margin-bottom: 20px;\n  border: 2px solid black;\n  border-radius: 4px;\n  align-items: center;\n  justify-content: center;\n}\n/*\n.markdown-preview {\n  margin-top: 10px;\n  margin-bottom: 10px;\n  overflow-y: auto;\n  height: 200px;\n  width: 500px;\n  border: 1px solid black;\n}\n*/\n.save-button {\n  align-self: center;\n}\n</style>\n<!--\n/*\nconst compiledMarkdown = computed(() => {\n    return md.render(markdown.value);\n});\n\nconst save = async () => {\n    const doc = new jsPDF();\n    doc.text(markdown.value, 10, 10);\n    const pdf = doc.output('blob');\n\n    try {\n        const formData = new FormData();\n        formData.append('action', 'create_draft');\n        formData.append('file', pdf, `${draftName.value}.pdf`);\n        formData.append('file_data', JSON.stringify({\n            content: markdown.value,\n            filename: `${draftName.value}.pdf`\n        }));\n        console.log('formData:', formData);\n\n        const response = await axios.post(`${process.env.VUE_APP_FLASK_APP_URL}/project_workspace/${props.project_id}`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n\n        if (response.status === 200) {\n            console.log('Draft saved successfully');\n        } else {\n            console.log('Failed to save draft');\n        }\n    } catch (error) {\n        console.error('An error occurred while saving the draft:', error);\n    }\n};\n-->"],"mappings":";;;;uBAAAA,mBAAA,CAAAC,SAAA,S,gBASIC,mBAAA,CAAqF;IAA9EC,KAAK,EAAC,kBAAkB;IATnC,uBAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAS6CC,KAAA,CAAAC,SAAS,GAAAF,MAAA;IAAA;IAAEG,WAAW,EAAC;iDAAvBF,KAAA,CAAAC,SAAS,E,GAClDE,mBAAA,uEAAsE,EACtEC,YAAA,CAAyGC,uBAAA;IAA1FC,OAAK,EAAEC,QAAA,CAAAC,aAAa;IAAEC,GAAG,EAAC,OAAO;IAACC,EAAE,EAAC,cAAc;IAACC,aAAa,EAAC;wCACjFP,YAAA,CAA6EQ,8BAAA;IAAxDf,KAAK,EAAC,aAAa;IAAEgB,OAAK,EAAEN,QAAA,CAAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}