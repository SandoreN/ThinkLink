{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_quill_editor = _resolveComponent(\"quill-editor\");\n  var _component_savebuttoncontainer = _resolveComponent(\"savebuttoncontainer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"draft-name-input\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n      return $setup.draftName = $event;\n    }),\n    placeholder: \"Enter draft name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.draftName]]), _createCommentVNode(\"<div v-html=\\\"compiledMarkdown \\\" class=\\\"markdown-preview\\\"></div>\"), _createVNode(_component_quill_editor, {\n    id: \"quill-editor\",\n    modelValue: $setup.quill,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = function ($event) {\n      return $setup.quill = $event;\n    }),\n    onContentChange: $setup.updateMarkdown\n  }, null, 8 /* PROPS */, [\"modelValue\", \"onContentChange\"]), _createVNode(_component_savebuttoncontainer, {\n    class: \"save-button\",\n    onClick: $setup.save\n  }, null, 8 /* PROPS */, [\"onClick\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","class","_cache","$event","$setup","draftName","placeholder","_createCommentVNode","_createVNode","_component_quill_editor","id","modelValue","quill","onContentChange","updateMarkdown","_component_savebuttoncontainer","onClick","save"],"sources":["/home/user/School/CSC330/ThinkLink/client/src/components/drafts.vue"],"sourcesContent":["/<!--\n<template>\n    <input class=\"draft-name-input\" v-model=\"draftName\" placeholder=\"Enter draft name\" />\n    <div v-html=\"compiledMarkdown\" class=\"markdown-preview\"></div>\n    <textarea id=\"markdown-editor\" v-model=\"markdown\"></textarea>\n    <savebuttoncontainer class=\"save-button\" @click=\"save\"></savebuttoncontainer>\n</template>\n-->\n<template>\n    <input class=\"draft-name-input\" v-model=\"draftName\" placeholder=\"Enter draft name\" />\n    <!--<div v-html=\"compiledMarkdown \" class=\"markdown-preview\"></div>-->\n    <quill-editor id=\"quill-editor\" v-model=\"quill\" @contentChange=\"updateMarkdown\"></quill-editor>\n    <savebuttoncontainer class=\"save-button\" @click=\"save\"></savebuttoncontainer>\n</template>\n\n<script>\n/*\nimport savebuttoncontainer from '. ./components/savebuttoncontainer'\nimport { ref, computed, watch } from 'vue';\nimport MarkdownIt from 'markdown-it';\nimport { jsPDF } from 'jspdf';\nimport axios from 'axios';\n*/\n//import 'quill/dist/quill.snow.css'; // for snow theme\nimport { quillEditor } from 'vue3-quill';\nimport savebuttoncontainer from '../components/savebuttoncontainer';\nimport { ref, computed, watch } from 'vue';\nimport { jsPDF } from 'jspdf';\nimport axios from 'axios';\n\nexport default {\n    name: 'Drafts',\n    components: {\n        savebuttoncontainer,\n        quillEditor\n    },\n    /*\n    export default {\n    name: 'Drafts',\n    components: {\n        savebuttoncontainer\n    },\n    */\n    props: {\n        project_id: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props) {\n\n        const draftName = ref('');\n        const markdown = ref('');\n        //const md = new MarkdownIt();\n        const project_id = ref(props.project_id);\n        const quill = ref(null);\n\n        watch(props, (newProps) => {\n            project_id.value = newProps.project_id;\n        });\n        const updateMarkdown = ({ quill }) => {\n            markdown.value = quill.root.innerHTML;\n            console.log('Content changed:', markdown.value);\n        };\n\n        const save = async () => {\n            let content = '';\n            if (quill.value) {\n                content = JSON.stringify(quill.value.getContents());\n            } \n            console.log('Quill editor content:', content);\n            const doc = new jsPDF();\n            await doc.html(content, { // Wait for the HTML to be rendered\n                x: 10,\n                y: 10\n            });\n\n            const pdf = doc.output('blob');\n            console.log('Draft name:', draftName.value);\n\n\n            try {\n                const formData = new FormData();\n                formData.append('action', 'create_draft');\n                formData.append('file', pdf, `${draftName.value}.pdf`);\n                formData.append('file_data', JSON.stringify({\n                    content: content,\n                    filename: `${draftName.value}.pdf`\n                }));\n\n                const response = await axios.post(`${process.env.VUE_APP_FLASK_APP_URL}/project_workspace/${props.project_id}`, formData, {\n                    headers: {\n                        'Content-Type': 'multipart/form-data'\n                    }\n                });\n\n                if (response.status === 200) {\n                    console.log('Draft saved successfully');\n                } else {\n                    console.log('Failed to save draft');\n                }\n            } catch (error) {\n                console.error(error);\n            }\n        };\n        return {\n            draftName,\n            quill,\n            project_id,\n            save,\n            updateMarkdown\n        };\n    },\n};\n</script>\n\n<style scoped>\n.projectworkspace-pagemain {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-items: center;\n  justify-content: center;\n  padding-top: 30px;\n  max-width: 100%;\n  height: 100%;\n  position: relative;\n  flex-grow: 1;\n}\n\n#quill-editor {\n  display: flex;\n  width: 500px;\n  height: 450px;\n  border: 1px solid black;\n}\n\n.draft-name-input {\n  height: 55px;\n  padding: 10px;\n  font-size: 30px;\n  margin-bottom: 20px;\n  border: 2px solid black;\n  border-radius: 4px;\n  align-items: center;\n  justify-content: center;\n}\n/*\n.markdown-preview {\n  margin-top: 10px;\n  margin-bottom: 10px;\n  overflow-y: auto;\n  height: 200px;\n  width: 500px;\n  border: 1px solid black;\n}\n*/\n.save-button {\n  align-self: center;\n}\n</style>\n<!--\n/*\nconst compiledMarkdown = computed(() => {\n    return md.render(markdown.value);\n});\n\nconst save = async () => {\n    const doc = new jsPDF();\n    doc.text(markdown.value, 10, 10);\n    const pdf = doc.output('blob');\n\n    try {\n        const formData = new FormData();\n        formData.append('action', 'create_draft');\n        formData.append('file', pdf, `${draftName.value}.pdf`);\n        formData.append('file_data', JSON.stringify({\n            content: markdown.value,\n            filename: `${draftName.value}.pdf`\n        }));\n        console.log('formData:', formData);\n\n        const response = await axios.post(`${process.env.VUE_APP_FLASK_APP_URL}/project_workspace/${props.project_id}`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        });\n\n        if (response.status === 200) {\n            console.log('Draft saved successfully');\n        } else {\n            console.log('Failed to save draft');\n        }\n    } catch (error) {\n        console.error('An error occurred while saving the draft:', error);\n    }\n};\n-->"],"mappings":";;;;uBAAAA,mBAAA,CAAAC,SAAA,S,gBASIC,mBAAA,CAAqF;IAA9EC,KAAK,EAAC,kBAAkB;IATnC,uBAAAC,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAS6CC,MAAA,CAAAC,SAAS,GAAAF,MAAA;IAAA;IAAEG,WAAW,EAAC;iDAAvBF,MAAA,CAAAC,SAAS,E,GAClDE,mBAAA,uEAAsE,EACtEC,YAAA,CAA+FC,uBAAA;IAAjFC,EAAE,EAAC,cAAc;IAXnCC,UAAA,EAW6CP,MAAA,CAAAQ,KAAK;IAXlD,uBAAAV,MAAA,QAAAA,MAAA,gBAAAC,MAAA;MAAA,OAW6CC,MAAA,CAAAQ,KAAK,GAAAT,MAAA;IAAA;IAAGU,eAAa,EAAET,MAAA,CAAAU;8DAChEN,YAAA,CAA6EO,8BAAA;IAAxDd,KAAK,EAAC,aAAa;IAAEe,OAAK,EAAEZ,MAAA,CAAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}