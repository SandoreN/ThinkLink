{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  // State is where you store the data your application needs\n  state: {\n    userId: null // Example state property\n  },\n  // Mutations are synchronous functions that change state\n  mutations: {\n    // This mutation will be responsible for setting the user ID in the state\n    SET_USER_ID: function SET_USER_ID(state, userId) {\n      state.userId = userId;\n    }\n  },\n  // Actions are functions that you call throughout your application that call mutations\n  actions: {\n    // This action will be called from your component to trigger the SET_USER_ID mutation\n    setUserId: function setUserId(_ref, userId) {\n      var commit = _ref.commit;\n      commit('SET_USER_ID', userId);\n    }\n  },\n  // Getters are like computed properties for your store and can be used to compute derived state\n  getters: {\n    // You could have a getter to get the current user ID\n    getUserId: function getUserId(state) {\n      return state.userId;\n    }\n  },\n  // If your application grows, you can split your store into modules\n  modules: {\n    // modules go here\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","userId","mutations","SET_USER_ID","actions","setUserId","_ref","commit","getters","getUserId","modules"],"sources":["/home/jescobar/Spring2024/SoftDD/ThinkLink/client/src/store/index.js"],"sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  // State is where you store the data your application needs\n  state: {\n    userId: null, // Example state property\n  },\n\n  // Mutations are synchronous functions that change state\n  mutations: {\n    // This mutation will be responsible for setting the user ID in the state\n    SET_USER_ID(state, userId) {\n      state.userId = userId;\n    }\n  },\n\n  // Actions are functions that you call throughout your application that call mutations\n  actions: {\n    // This action will be called from your component to trigger the SET_USER_ID mutation\n    setUserId({ commit }, userId) {\n      commit('SET_USER_ID', userId);\n    }\n  },\n\n  // Getters are like computed properties for your store and can be used to compute derived state\n  getters: {\n    // You could have a getter to get the current user ID\n    getUserId(state) {\n      return state.userId;\n    }\n  },\n\n  // If your application grows, you can split your store into modules\n  modules: {\n    // modules go here\n  }\n});\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;AAEb,eAAe,IAAIA,IAAI,CAACE,KAAK,CAAC;EAC5B;EACAC,KAAK,EAAE;IACLC,MAAM,EAAE,IAAI,CAAE;EAChB,CAAC;EAED;EACAC,SAAS,EAAE;IACT;IACAC,WAAW,WAAAA,YAACH,KAAK,EAAEC,MAAM,EAAE;MACzBD,KAAK,CAACC,MAAM,GAAGA,MAAM;IACvB;EACF,CAAC;EAED;EACAG,OAAO,EAAE;IACP;IACAC,SAAS,WAAAA,UAAAC,IAAA,EAAaL,MAAM,EAAE;MAAA,IAAlBM,MAAM,GAAAD,IAAA,CAANC,MAAM;MAChBA,MAAM,CAAC,aAAa,EAAEN,MAAM,CAAC;IAC/B;EACF,CAAC;EAED;EACAO,OAAO,EAAE;IACP;IACAC,SAAS,WAAAA,UAACT,KAAK,EAAE;MACf,OAAOA,KAAK,CAACC,MAAM;IACrB;EACF,CAAC;EAED;EACAS,OAAO,EAAE;IACP;EAAA;AAEJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}